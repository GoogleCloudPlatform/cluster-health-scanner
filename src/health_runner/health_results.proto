// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

edition = "2023";

package health_runner;

import "google/protobuf/timestamp.proto";



option features.field_presence = IMPLICIT;

// The results of the health checks.
message HealthResults {
  // The name of the health check.
  google.protobuf.Timestamp created_date_time = 1;

  // The version of the health runner.
  string version = 2;

  // An ID for this run.
  string id = 4;

  // A description of the run.
  string description = 5;

  // The results of the health checks.
  repeated HealthResult health_results = 3;
}

// The results of a single health check.
message HealthResult {
  // The name of the health check.
  string name = 1;

  // The type of the health check.
  string type = 2;

  // The results of the health check.
  repeated HealthResultList health_results = 3;
}

message HealthResultList {
  // The ID of the object under test (NodeID, RackID, ClusterID, etc).
  string id = 1;

  // The status of the health check.
  Status status = 2;

  // The master pod name of the health check. This is used to find the master
  // node for the health check.
  string master_pod_name = 12;

  // The start time of the health check.
  google.protobuf.Timestamp start_time = 9;

  // The end time of the health check.
  google.protobuf.Timestamp end_time = 10;

  // The number of nodes in the topology under test.
  int32 num_nodes = 4;

  // Additional results for specific health checks.
  repeated NCCLHealthResult nccl_health_result = 3;

  // Additional results for NEMO health checks.
  repeated NEMOHealthResult nemo_health_result = 5;

  // The instance IDs of the node under test.
  string instance_id = 6 [deprecated = true];
  repeated string instance_ids = 11;

  // The rack IDs of the nodes under test. Only populated for performance
  // health checks.
  repeated string rack_ids = 7;

  HPCHealthResult hpc_health_result = 8;
}

message HPCHealthResult {
  message Metrics {
    string name = 1;
    string value = 2;
  }

  // The benchmark of the HPL test (HPL, HPL_2, etc).
  string benchmark = 1;
  repeated Metrics metrics = 2;
}

message NCCLHealthResult {
  message NCCLBandwidthResult {
    // The bandwidth value in GBps.
    double bandwidth_gbps = 1;

    // The bandwidth baseline in GBps.
    double bandwidth_baseline_gbps = 4;

    // The message size in bytes.
    int64 message_size_bytes = 2;

    // The latency value in ms.
    int64 latency_ms = 3;
  }

  // The benchmark of the NCCL test (all_reduce, all_gather, etc).
  string benchmark = 1;

  // The average bandwidth of the NCCL test in GBps.
  double average_bandwidth_gbps = 2;

  // The bandwidth measurements of the NCCL test for different message sizes.
  repeated NCCLBandwidthResult bandwidth_measurements = 3;
}

message NEMOHealthResult {
  // The step time of the NEMO test in seconds.
  double step_time_seconds = 1;

  // The TFLOPS per accelerator of the NEMO test.
  double tflops_per_accelerator = 2;

  // The MFU of the NEMO test.
  double mfu = 3;
}

// The results NCCL health check for a single object.
message HPCNCCLHealthResult {
  int32 bandwidth_gbps = 1;
  string benchmark = 2;
}

message HPLHealthResult {
  // The throughput of the HPL test in GFlops.
  double throughput_gflops = 1;

  // The benchmark of the HPL test (HPL, HPL_2, etc).
  string benchmark = 2;
}

// The status of the health check.
enum Status {
  UNKNOWN = 0;
  PASS = 1;
  FAIL = 2;

  // The health check was skipped. Could be skipped do to machine taint or in
  // the case of performance and communication health checks, not enough nodes
  // to run the test.
  SKIP = 3;
}
