# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 7200s  # Sets the overall build timeout to 2 hours.

substitutions:
  _HEALTH_CHECK_REPOSITORY_BASE: us-docker.pkg.dev/gce-ai-infra/health-check
  _BASE_IMAGE_GIB_AMD: us-docker.pkg.dev/gce-ai-infra/gpudirect-gib/nccl-plugin-gib:v1.0.2
  _BASE_IMAGE_GIB_ARM: us-docker.pkg.dev/gce-ai-infra/gpudirect-gib/nccl-plugin-gib-diagnostic-arm64:v1.0.6
steps:
# Enable QEMU emulation for cross-platform builds
# Allows the AMD64 Cloud Build worker to execute ARM64 instructions
- name: 'gcr.io/cloud-builders/docker'
  args: ['run', '--rm', '--privileged', 'multiarch/qemu-user-static', '--reset', '-p', 'yes']
  id: 'Setup QEMU'
  waitFor: ['-']

# Enable Buildx Driver for multi-platform builds
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    set -e
    echo "Creating and using docker-container builder..."
    docker buildx create --name multiarch-builder --driver docker-container --use
    docker buildx inspect --bootstrap multiarch-builder
    echo "Buildx setup complete."
  id: 'Setup Buildx Driver'
  waitFor: ['Setup QEMU']


# Execute the multi-platform build and push using Docker Buildx
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    #!/bin/bash
      set -e
      echo "Starting multi-arch build"
      health_check_names=("gpu-healthcheck")
      machine_types=("a3-highgpu-8g" "a3-megagpu-8g" "a3-ultragpu-8g" "a4-highgpu-8g")

      for health_check_name in "${health_check_names[@]}"; do
        for machine_type in "${machine_types[@]}"; do
          _VERSION=$(cat deploy/helm/health_runner/version.txt)
          echo "Building ${health_check_name} for ${machine_type} with version $$_VERSION..."
          latest_tag="$_HEALTH_CHECK_REPOSITORY_BASE/$${health_check_name}:$${machine_type}_$$_VERSION"
          dockerfile="docker/${health_check_name//-/_}.Dockerfile"
          echo "Building with tag: ${latest_tag} and Dockerfile: ${dockerfile}"
          docker buildx build  --platform linux/amd64,linux/arm64 -t "${latest_tag}" -f "${dockerfile}" . --push
          echo "Successfully built image: ${latest_tag}"

          major_minor_version=$(echo "$$_VERSION" | cut -d '.' -f 1-2)
          latest_tag_major_minor="$_HEALTH_CHECK_REPOSITORY_BASE/$${health_check_name}:$${machine_type}_$${major_minor_version}-latest"
          docker tag "${latest_tag}" "${latest_tag_major_minor}"
          docker push "${latest_tag_major_minor}"
        done
      done
  id: 'Build and Push Multi-Arch Image'
  waitFor: ['Setup Buildx Driver']

# Build and Push NCCL AMD64 GIB variant
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  id: 'Build AMD64 GIB'
  waitFor: ['Setup Buildx Driver']
  args:
  - '-c'
  - |
   #!/bin/bash
      set -e
      echo "Building NCCL AMD64 GIB Variant..."
      machine_types=("a3-ultragpu-8g" "a4-highgpu-8g")
      for machine_type in "${machine_types[@]}"; do
        _VERSION=$(cat deploy/helm/health_runner/version.txt)
        echo "Building nccl-healthcheck for ${machine_type} with version $$_VERSION..."
        latest_tag="$_HEALTH_CHECK_REPOSITORY_BASE/nccl-healthcheck:$${machine_type}_$$_VERSION"
        dockerfile="docker/nccl_healthcheck_gib.Dockerfile"
        echo "Building with tag: ${latest_tag} and Dockerfile: ${dockerfile}"
        docker buildx build \
          --build-arg BASE_IMAGE="${_BASE_IMAGE_GIB_AMD}" \
          --platform linux/amd64 \
          -t "${latest_tag}" \
          -f "${dockerfile}" \
          . \
          --push
        echo "Successfully built image: ${latest_tag}"

        major_minor_version=$(echo "$$_VERSION" | cut -d '.' -f 1-2)
        latest_tag_major_minor="$_HEALTH_CHECK_REPOSITORY_BASE/nccl-healthcheck:$${machine_type}_$${major_minor_version}-latest"
        docker tag "${latest_tag}" "${latest_tag_major_minor}"
        docker push "${latest_tag_major_minor}"
      done

# Build and Push NCCL ARM64 GIB variant
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  id: 'Build ARM64 GIB'
  waitFor: ['Setup Buildx Driver']
  args:
  - '-c'
  - |
    #!/bin/bash
    set -e
    echo "Building NCCL ARM64 GIB Variant..."
    _VERSION=$(cat deploy/helm/health_runner/version.txt)
    latest_tag="$_HEALTH_CHECK_REPOSITORY_BASE/nccl-healthcheck:a4x-highgpu-4g_$$_VERSION"
    dockerfile="docker/nccl_healthcheck_gib.Dockerfile"
    echo "Building with tag: ${latest_tag} and Dockerfile: ${dockerfile}"
    docker buildx build \
      --build-arg BASE_IMAGE="${_BASE_IMAGE_GIB_ARM}" \
      --platform linux/arm64 \
      -t "${latest_tag}" \
      -f "${dockerfile}" \
      . \
      --push
    major_minor_version=$(echo "$$_VERSION" | cut -d '.' -f 1-2)
    latest_tag_major_minor="$_HEALTH_CHECK_REPOSITORY_BASE/nccl-healthcheck:a4x-highgpu-4g_$${major_minor_version}-latest"
    docker tag "${latest_tag}" "${latest_tag_major_minor}"
    docker push "${latest_tag_major_minor}"

# Build and push the healthchecks images
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: bash
  args:
  - -c
  - |
      #!/bin/bash
      set -e

      health_check_names=("nccl-healthcheck" "neper-healthcheck" "straggler-healthcheck" "tinymax-healthcheck")
      machine_types=("a3-highgpu-8g" "a3-megagpu-8g" "a3-ultragpu-8g" "a4-highgpu-8g" "a4x-highgpu-4g")

      for health_check_name in "${health_check_names[@]}"; do
        for machine_type in "${machine_types[@]}"; do
          _VERSION=$(cat deploy/helm/health_runner/version.txt)
          echo "Building ${health_check_name} for ${machine_type} with version $$_VERSION..."

          if [[ "$health_check_name" == "nccl-healthcheck" && \
                ("$machine_type" == "a3-ultragpu-8g" || \
                "$machine_type" == "a4-highgpu-8g" || \
                "$machine_type" == "a4x-highgpu-4g") ]]; then
            continue
          else
            dockerfile="docker/${health_check_name//-/_}.Dockerfile"
          fi

          latest_tag="$_HEALTH_CHECK_REPOSITORY_BASE/$${health_check_name}:$${machine_type}_$$_VERSION"

          echo "Building with tag: ${latest_tag} and Dockerfile: ${dockerfile}"
          docker build -t "${latest_tag}" -f "${dockerfile}" .
          echo "Successfully built image: ${latest_tag}"
          docker push "${latest_tag}"

          major_minor_version=$(echo "$$_VERSION" | cut -d '.' -f 1-2)
          latest_tag_major_minor="$_HEALTH_CHECK_REPOSITORY_BASE/$${health_check_name}:$${machine_type}_$${major_minor_version}-latest"
          docker tag "${latest_tag}" "${latest_tag_major_minor}"
          docker push "${latest_tag_major_minor}"
        done
      done
  id: build-healthchecks
  waitFor: ['-']

# Build health-runner
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: bash
  args:
  - -c
  - |
      #!/bin/bash
      set -e

      _BUILD_TARGET="health_runner"

      _VERSION=$(cat deploy/helm/health_runner/version.txt)
      latest_tag="$_HEALTH_CHECK_REPOSITORY_BASE/health-runner:$$_VERSION"

      echo "Building $$_BUILD_TARGET with version $$_VERSION..."
      docker buildx build \
      --platform linux/amd64,linux/arm64 \
      -t "${latest_tag}" \
      -f "docker/$$_BUILD_TARGET.Dockerfile" \
      . \
      --push
      echo "Successfully built image: ${latest_tag}"
  id: build-health-runner
  waitFor: ['Setup Buildx Driver']

- name: 'us-docker.pkg.dev/scaevola-builder-integration/release/scanvola/scanvola'
  args: ['--image=$_HEALTH_CHECK_REPOSITORY_BASE/health-runner:$REF_NAME']

options:
  # See: https://cloud.google.com/build/docs/securing-builds/view-build-provenance#req-metadata
  requestedVerifyOption: VERIFIED
