# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 7200s  # Sets the overall build timeout to 2 hours.

substitutions:
  _HEALTH_CHECK_REPOSITORY_BASE: us-docker.pkg.dev/gce-ai-infra/health-check
  _BASE_IMAGE_GIB_AMD: us-docker.pkg.dev/gce-ai-infra/gpudirect-gib/nccl-plugin-gib:v1.0.2
  _BASE_IMAGE_GIB_ARM: us-docker.pkg.dev/gce-ai-infra/gpudirect-gib/nccl-plugin-gib-diagnostic-arm64:v1.0.4
steps:
- name: 'alpine'
  entrypoint: sh
  args:
  - -c
  - |
      #!/bin/bash
      set -e

      _VERSION=$(cat deploy/helm/health_runner/version.txt)
      [ -n "$$_VERSION" ] || { echo "ERROR: _VERSION is empty or not set"; exit 1; };
      echo "Version found to be: $$_VERSION"

      REF_NAME="$$_VERSION"
  id: Get Version

# Enable QEMU emulation for cross-platform builds
# Allows the AMD64 Cloud Build worker to execute ARM64 instructions
- name: 'gcr.io/cloud-builders/docker'
  args: ['run', '--rm', '--privileged', 'multiarch/qemu-user-static', '--reset', '-p', 'yes']
  id: 'Setup QEMU'
  waitFor: ['-']

# Enable Buildx Driver for multi-platform builds
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    set -e
    echo "Creating and using docker-container builder..."
    docker buildx create --name multiarch-builder --driver docker-container --use
    docker buildx inspect --bootstrap multiarch-builder
    echo "Buildx setup complete."
  id: 'Setup Buildx Driver'
  waitFor: ['Setup QEMU']


# Build health-runner
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: bash
  args:
  - -c
  - |
      #!/bin/bash
      set -e

      _BUILD_TARGET="health_runner"

      latest_tag="$_HEALTH_CHECK_REPOSITORY_BASE/health-runner:$REF_NAME"

      echo "Building $$_BUILD_TARGET with version $REF_NAME..."
      docker buildx build \
      --platform linux/amd64,linux/arm64 \
      -t "${latest_tag}" \
      -f "docker/$$_BUILD_TARGET.Dockerfile" \
      . \
      --push
      echo "Successfully built image: ${latest_tag}"
  id: build-health-runner
  waitFor: ['Get Version', 'Setup Buildx Driver']
