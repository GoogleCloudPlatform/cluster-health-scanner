steps:
# Read current version
- name: 'alpine'
  entrypoint: sh
  args:
    - -c
    - |
      _VERSION=$(cat deploy/helm/health_runner/version.txt)
      [ -n "$$_VERSION" ] || { echo "ERROR: _VERSION is empty or not set"; exit 1; };
      echo "Version found to be: $$_VERSION"
      export CLOUD_BUILD_VERSION="$_VERSION"
  id: read-version

# Build, tag, and push healthchecks
- name: 'alpine'
  waitFor: ['read-version']
  entrypoint: bash
  args:
    - -c
    - |
      #!/bin/bash
      set -e

      HEALTH_CHECK_REPOSITORY_BASE="$$HEALTH_CHECK_REPOSITORY_BASE"

      health_check_names=("gpu-healthcheck" "nccl-healthcheck" "neper-healthcheck" "straggler-healthcheck" "tinymax-healthcheck")
      machine_types=("a3-highgpu-8g" "a3-megagpu-8g" "a3-ultragpu-8g" "a4-highgpu-8g")

      for health_check_name in "${health_check_names[@]}"; do
        for machine_type in "${machine_types[@]}"; do
          echo "Building ${health_check_name} for ${machine_type} with version $$CLOUD_BUILD_VERSION..."

          if [[ "$${machine_type}" == "a3-ultragpu-8g" && "$${health_check_name}" == "nccl-healthcheck" ]]; then
            dockerfile="docker/nccl_healthcheck_a3ultra.Dockerfile"
          elif [[ "$${machine_type}" == "a4-highgpu-8g" && "$${health_check_name}" == "nccl-healthcheck" ]]; then
            dockerfile="docker/nccl_healthcheck_a3ultra.Dockerfile"
          else
            dockerfile="docker/$${health_check_name}.Dockerfile"
          fi

          image_tag="$$HEALTH_CHECK_REPOSITORY_BASE/$${health_check_name}/$${machine_type}_$$CLOUD_BUILD_VERSION"
          latest_tag="$$HEALTH_CHECK_REPOSITORY_BASE/$${health_check_name}/$${machine_type}_$$CLOUD_BUILD_VERSION-latest"

          echo "Building with tag: ${image_tag} and Dockerfile: ${dockerfile}"
          docker build -t "${image_tag}" -f "${dockerfile}" . && docker push "${image_tag}"
          echo "Successfully pushed image: ${image_tag}"

          echo "Tagging ${image_tag} as ${latest_tag}"
          docker tag "${image_tag}" "${latest_tag}"
          docker push "${latest_tag}"
          echo "Successfully pushed image: ${latest_tag}"
        done
      done
  env:
    - CLOUD_BUILD_VERSION
    - HEALTH_CHECK_REPOSITORY_BASE
  id: build-tag-push-healthchecks

# Build, tag, and push health-runner
- name: 'gcr.io/cloud-builders/docker'
  waitFor: ['read-version']
  entrypoint: bash # Optional, but good practice for consistency
  args:
    - -c
    - |
      #!/bin/bash
      set -e

      BUILD_TARGET="health-runner"
      HEALTH_RUNNER_REPOSITORY="$$HEALTH_RUNNER_REPOSITORY"
      image_tag="$$HEALTH_RUNNER_REPOSITORY:$$CLOUD_BUILD_VERSION"
      latest_tag="$$HEALTH_RUNNER_REPOSITORY:$$CLOUD_BUILD_VERSION-latest"

      echo "Building and pushing $$BUILD_TARGET with version $$CLOUD_BUILD_VERSION..."
      docker build -t "${image_tag}" -f "docker/$$BUILD_TARGET.Dockerfile" . && docker push "${image_tag}"
      echo "Successfully pushed image: ${image_tag}"

      echo "Tagging ${image_tag} as ${latest_tag}"
      docker tag "${image_tag}" "${latest_tag}"
      docker push "${latest_tag}"
      echo "Successfully pushed image: ${latest_tag}"
  env:
    - CLOUD_BUILD_VERSION
    - HEALTH_RUNNER_REPOSITORY
  id: build-tag-push-health-runner
